{"ast":null,"code":"const columns = [{\n  name: 'name',\n  required: true,\n  label: 'Dessert (100g serving)',\n  align: 'left',\n  field: row => row.name,\n  format: val => `${val}`,\n  sortable: true\n}, {\n  name: 'calories',\n  align: 'center',\n  label: 'Calories',\n  field: 'calories',\n  sortable: true\n}, {\n  name: 'fat',\n  label: 'Fat (g)',\n  field: 'fat',\n  sortable: true\n}, {\n  name: 'carbs',\n  label: 'Carbs (g)',\n  field: 'carbs'\n}, {\n  name: 'protein',\n  label: 'Protein (g)',\n  field: 'protein'\n}, {\n  name: 'sodium',\n  label: 'Sodium (mg)',\n  field: 'sodium'\n}, {\n  name: 'calcium',\n  label: 'Calcium (%)',\n  field: 'calcium',\n  sortable: true,\n  sort: (a, b) => parseInt(a, 10) - parseInt(b, 10)\n}, {\n  name: 'iron',\n  label: 'Iron (%)',\n  field: 'iron',\n  sortable: true,\n  sort: (a, b) => parseInt(a, 10) - parseInt(b, 10)\n}];\nconst rows = [{\n  name: 'Frozen Yogurt',\n  calories: 159,\n  fat: 6.0,\n  carbs: 24,\n  protein: 4.0,\n  sodium: 87,\n  calcium: '14%',\n  iron: '1%'\n}, {\n  name: 'Ice cream sandwich',\n  calories: 237,\n  fat: 9.0,\n  carbs: 37,\n  protein: 4.3,\n  sodium: 129,\n  calcium: '8%',\n  iron: '1%'\n}, {\n  name: 'Eclair',\n  calories: 262,\n  fat: 16.0,\n  carbs: 23,\n  protein: 6.0,\n  sodium: 337,\n  calcium: '6%',\n  iron: '7%'\n}, {\n  name: 'Cupcake',\n  calories: 305,\n  fat: 3.7,\n  carbs: 67,\n  protein: 4.3,\n  sodium: 413,\n  calcium: '3%',\n  iron: '8%'\n}, {\n  name: 'Gingerbread',\n  calories: 356,\n  fat: 16.0,\n  carbs: 49,\n  protein: 3.9,\n  sodium: 327,\n  calcium: '7%',\n  iron: '16%'\n}];\nexport default {\n  setup() {\n    return {\n      columns,\n      rows\n    };\n  }\n};","map":{"version":3,"names":["columns","name","required","label","align","field","row","format","val","sortable","sort","a","b","parseInt","rows","calories","fat","carbs","protein","sodium","calcium","iron","setup"],"sources":["C:\\Users\\PC01\\Documents\\Desafio_Eliezer_Embracon\\front_end\\desafio\\src\\components\\TabelaClientes.vue"],"sourcesContent":["<template>\n  <div class=\"q-pa-md\">\n    <q-table\n      flat bordered\n      title=\"Treats\"\n      :rows=\"rows\"\n      :columns=\"columns\"\n      row-key=\"name\"\n    >\n\n      <template v-slot:header=\"props\">\n        <q-tr :props=\"props\">\n          <q-th auto-width />\n          <q-th\n            v-for=\"col in props.cols\"\n            :key=\"col.name\"\n            :props=\"props\"\n          >\n            {{ col.label }}\n          </q-th>\n        </q-tr>\n      </template>\n\n      <template v-slot:body=\"props\">\n        <q-tr :props=\"props\">\n          <q-td auto-width>\n            <q-btn size=\"sm\" color=\"accent\" round dense @click=\"props.expand = !props.expand\" :icon=\"props.expand ? 'remove' : 'add'\" />\n          </q-td>\n          <q-td\n            v-for=\"col in props.cols\"\n            :key=\"col.name\"\n            :props=\"props\"\n          >\n            {{ col.value }}\n          </q-td>\n        </q-tr>\n        <q-tr v-show=\"props.expand\" :props=\"props\">\n          <q-td colspan=\"100%\">\n            <div class=\"text-left\">This is expand slot for row above: {{ props.row.name }}.</div>\n          </q-td>\n        </q-tr>\n      </template>\n\n    </q-table>\n  </div>\n</template>\n\n<script>\nconst columns = [\n  {\n    name: 'name',\n    required: true,\n    label: 'Dessert (100g serving)',\n    align: 'left',\n    field: row => row.name,\n    format: val => `${val}`,\n    sortable: true\n  },\n  { name: 'calories', align: 'center', label: 'Calories', field: 'calories', sortable: true },\n  { name: 'fat', label: 'Fat (g)', field: 'fat', sortable: true },\n  { name: 'carbs', label: 'Carbs (g)', field: 'carbs' },\n  { name: 'protein', label: 'Protein (g)', field: 'protein' },\n  { name: 'sodium', label: 'Sodium (mg)', field: 'sodium' },\n  { name: 'calcium', label: 'Calcium (%)', field: 'calcium', sortable: true, sort: (a, b) => parseInt(a, 10) - parseInt(b, 10) },\n  { name: 'iron', label: 'Iron (%)', field: 'iron', sortable: true, sort: (a, b) => parseInt(a, 10) - parseInt(b, 10) }\n]\n\nconst rows = [\n  {\n    name: 'Frozen Yogurt',\n    calories: 159,\n    fat: 6.0,\n    carbs: 24,\n    protein: 4.0,\n    sodium: 87,\n    calcium: '14%',\n    iron: '1%'\n  },\n  {\n    name: 'Ice cream sandwich',\n    calories: 237,\n    fat: 9.0,\n    carbs: 37,\n    protein: 4.3,\n    sodium: 129,\n    calcium: '8%',\n    iron: '1%'\n  },\n  {\n    name: 'Eclair',\n    calories: 262,\n    fat: 16.0,\n    carbs: 23,\n    protein: 6.0,\n    sodium: 337,\n    calcium: '6%',\n    iron: '7%'\n  },\n  {\n    name: 'Cupcake',\n    calories: 305,\n    fat: 3.7,\n    carbs: 67,\n    protein: 4.3,\n    sodium: 413,\n    calcium: '3%',\n    iron: '8%'\n  },\n  {\n    name: 'Gingerbread',\n    calories: 356,\n    fat: 16.0,\n    carbs: 49,\n    protein: 3.9,\n    sodium: 327,\n    calcium: '7%',\n    iron: '16%'\n  },\n \n]\n\nexport default {\n  setup () {\n    return {\n      columns,\n      rows\n    }\n  }\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}